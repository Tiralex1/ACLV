function correctString(e) { var t = e.replace("<", "&lt"); return t = t.replace(">", "&gt") } function createSimpleNode(e, t, i = "") { let n = document.createElement(e); "" !== i && (n.innerHTML = i); for (let e in t) n[e] = t[e]; return n } function charger(e) { e.style.display = "" } function decharger(e) { e.style.display = "none" } let falseTd = createSimpleNode("td", {}, "&#10025;"); class HTMLMusic { #e; #t; #i = []; constructor(e, t) { if (!e instanceof Music || !t instanceof HTMLAnime) throw new Error("Illegal Argument (constructor HTMLMusic)"); this.#e = t; let i = createSimpleNode("td", { className: "favo" }, "&#10025;"); i.addEventListener("click", (function () { modifFav(e.getAnime, e, i.innerHTML == falseTd.innerHTML), i.innerHTML = i.innerHTML == falseTd.innerHTML ? "&#9733;" : "&#10025;" })), this.#i.push(i), this.#i.push(createSimpleNode("td", { className: "nom_anime" }, e.getAnime.getNom)), this.#i.push(createSimpleNode("td", { className: "type_music" }, e.getType)), this.#i.push(createSimpleNode("td", { className: "numero_music" }, e.getNumero)), this.#i.push(createSimpleNode("td", { className: "nom_music" }, e.getNom)), this.#i.push(createSimpleNode("td", { className: "nom_artist" }, e.getArtist)); let n = createSimpleNode("a", { href: e.getLien, target: "_blank" }, "Lien"), r = createSimpleNode("br", {}), o = createSimpleNode("button", { style: "background-color : transparent; border : transparent;" }, "&#9658;"); o.addEventListener("click", (async function () { clickAudio(e.getLien, o) })); let a = createSimpleNode("td", { className: "lien" }); a.appendChild(n), a.appendChild(r), a.appendChild(o), this.#i.push(a), this.#t = document.createElement("tr"), this.#i.forEach((e => { this.#t.appendChild(e) })) } get getHTMLAnime() { return this.#e } get getTr() { return this.#t } getTd(e) { return this.#i[e] } setBackground(e) { this.#t.style.backgroundColor = e } } class Music { #n; #r; #o; #a; #s; #l; #c; constructor(e, t, i, n, r, o) { if (!(e instanceof Anime && "string" == typeof t && Number.isInteger(i) && "string" == typeof n && "string" == typeof r && "string" == typeof o)) throw new Error("Illegal Argument (constructor Music)"); this.#n = e, this.#r = t, this.#o = i, this.#a = n, this.#s = r, this.#l = o } get getAnime() { return this.#n } get getType() { return this.#r } get getNom() { return this.#a } get getNumero() { return this.#o } get getArtist() { return this.#s } get getLien() { return this.#l } get getHtml() { return this.#c } setHTML(e) { if (!e instanceof HTMLMusic) throw new Error("Illegal Argument (setHTML HTMLAnime)"); this.#c = e } } class HTMLAnime { #t; #u = []; constructor(e) { if (!e instanceof Anime) throw new Error("Illegal Argument (constructor HTMLAnime)"); this.#t = createSimpleNode("tr", { className: "grey" }); let t = createSimpleNode("td", { colSpan: "7" }); this.#t.appendChild(t); let i, n = createSimpleNode("div", { className: "tete" }); t.appendChild(n), "2" == ModeAffichLien ? (i = createSimpleNode("div", { className: "_1 grey" }, e.getNom + "&ensp;"), i.appendChild(createSimpleNode("a", { href: e.getLien, target: "_blank", style: "color : darkblue;" }, "&#9032;"))) : (i = createSimpleNode("div", { className: "_1 grey" }), i.appendChild(createSimpleNode("a", { href: e.getLien, target: "_blank" }, e.getNom))), n.appendChild(i); for (var r = 0; r < TabStringUsers.length; r++) { let t = createSimpleNode("div", { className: "_" + (r + 2) + (e.getEtatUser(r) ? " watch" : " no-watch") }, TabStringUsers[r]); n.appendChild(t) } for (let t = 0; t < e.getNbMusic; ++t) { let i = new HTMLMusic(e.getMusic(t), this); this.#u.push(i), e.getMusic(t).setHTML(i) } } get getTr() { return this.#t } get getTabTrMusic() { let e = []; return this.#u.forEach((t => { e.push(t.getTr) })), e } setBackground(e) { this.#u.forEach((t => { t.setBackground(e) })) } dechargerAll() { decharger(this.#t), this.#u.forEach((e => { decharger(e.getTr) })) } } class Anime { #a; #g; #m; #d = []; #f = []; #h = []; #c; constructor(e, t, i, n = null) { if ("string" != typeof e || !Number.isInteger(t) || !Number.isInteger(i)) throw new Error("Illegal Argument (constructor Anime)"); this.#a = e, this.#g = t, this.#m = i, null !== n && (this.#c = n) } get getNom() { return this.#a } get getId() { return this.#g } get getLien() { return "https://myanimelist.net/anime/" + this.#m } get getMalId() { return this.#m } getMusic(e) { if (!Number.isInteger(e)) throw new Error("illegal Argument (getMusic Method in Class Anime)"); return this.#d[e] } get getNbMusic() { return this.#d.length } getEtatUser(e) { if (!Number.isInteger(e)) throw new Error("illegal Argument (getEtatUser Method in Class Anime)"); return this.#h[e] } getEtatGenre(e) { if (!Number.isInteger(e)) throw new Error("illegal Argument (getEtatGenre Method in Class Anime)"); return this.#f[e] } get getHtml() { return this.#c } generateHTML() { this.#c = new HTMLAnime(this) } ajouteMusic(e) { if (!e instanceof Music) throw new Error("illegal Argument (ajouteMusic Method in Class Anime)"); this.#d.push(e) } ajoutePosMusic(e, t) { if (!e instanceof Music || !Number.isInteger(t)) throw new Error("illegal Argument (ajouteMusic Method in Class Anime)"); this.#d.splice(t, 0, e) } supprimePosMusic(e) { if (!Number.isInteger(e)) throw new Error("illegal Argument (supprimePosMusic Method in Class Anime)"); this.#d.splice(e, 1) } ajouteUser(e) { this.#h.push(e) } ajouteGenre(e) { this.#f.push(e) } copieUsers(e) { if (!e instanceof Anime) throw new Error("illegal Argument (copieUsers Method in Class Anime)"); for (var t = 0; t < TabStringUsers.length; ++t)this.ajouteUser(e.getEtatUser(t)) } copieGenres(e) { if (!e instanceof Anime) throw new Error("illegal Argument (copieGenres Method in Class Anime)"); for (var t = 0; t < TabGenres.length; ++t)this.ajouteUser(e.getEtatGenre(t)) } } class ListeAnime { #A = []; #b = 0; get getNbAnime() { return this.#A.length } get getNbMusic() { return this.#b } getAnime(e) { return this.#A[e] } generateHTML() { this.#A.forEach((e => { e.generateHTML() })) } ajouteAnime(e) { if (!e instanceof Anime) throw new Error("Illegal Argument (ajouteAnime Method in Class ListeAnime)"); this.#A.push(e), this.#b += e.getNbMusic } ajoutePosAnime(e, t) { if (!e instanceof Anime || !Number.isInteger(t)) throw new Error("Illegal Argument (ajoutePosAnime Method in Class ListeAnime)"); this.#A.splice(t, 0, e), this.#b += e.getNbMusic } ajoutePosMusic(e, t, i) { if (!t instanceof Music || !Number.isInteger(e) || !Number.isInteger(i)) throw new Error("Illegal Argument (ajoutePosMusic Method in Class ListeAnime)"); this.#b++, this.#A[e].ajoutePosMusic(t, i) } supprimePosAnime(e) { if (!Number.isInteger(e)) throw new Error("Illegal Argument (supprimePosAnime Method in Class ListeAnime)"); this.#A.splice(e, 1) } supprimePosMusic(e, t) { if (!Number.isInteger(e) || !Number.isInteger(t)) throw new Error("Illegal Argument (supprimePosMusic Method in Class ListeAnime)"); this.#A[e].supprimePosMusic(t), this.#b-- } dechargerAllHtml() { this.#A.forEach((e => { e.getHtml.dechargerAll() })) } } async function setupListenersFiltrage() { document.querySelectorAll("input[type='checkbox'], select").forEach((e => { "lecture_auto" != e.id && "inclusOnHoldDropped" != e.id && e.addEventListener("change", (async function () { filtre() })) })), document.querySelectorAll("input[type='text']").forEach((e => { e.addEventListener("input", (async function () { filtre() })) })), document.querySelector("#favori").addEventListener("click", (async function () { affichFav() })), document.querySelector("#save").addEventListener("click", (async function () { saveFav() })), document.querySelector("#load").addEventListener("click", (async function () { loadFav() })), document.addEventListener("scroll", (async function () { if (nbAffich != HTMLTab.length && window.scrollY >= nbPixelAvantUpdate) { for (let e = nbAffich; e < (nbAffich + 100 < HTMLTab.length ? nbAffich + 100 : HTMLTab.length); ++e)charger(HTMLTab[e]); nbAffich = nbAffich + 100 < HTMLTab.length ? nbAffich + 100 : HTMLTab.length, nbPixelAvantUpdate = Math.ceil(120 + 6e3 * (Math.ceil(nbAffich / 100) - 1) + 4500) } })), AudioActuel.addEventListener("ended", (function () { if (clickAudio.button.click(), lectureAutomatique) { let e = chercheNextBouton(clickAudio.button); null != e && e.click() } })), inputLectureAuto.addEventListener("click", (async function () { lectureAutomatique = !lectureAutomatique })), document.querySelectorAll("input[type='radio']").forEach((e => { e.addEventListener("change", (async function () { modifModeAffich() })) })), document.getElementById("AudioChangeServeur").addEventListener("click", (function (e) { AudioActuel.paused || clickAudio.button.click(); let t = serveurCatbox1; serveurCatbox1 = serveurCatbox2, serveurCatbox2 = t, AudioActuel.src = "", e.target.value = "ServeurCatbox : " + serveurCatbox1 })), document.getElementById("inclusOnHoldDropped").addEventListener("click", (function () { location.reload() })) } async function lancementData() { doCorsRequest("get", "data.json", genereData) } async function doCorsRequest(e, t, i) { let n = new XMLHttpRequest; n.open(e, t), n.onload = n.onerror = function () { let e = n.responseText; e = JSON.parse(e), i(e) }, n.send() } function genereData(e) { e.anime.forEach((e => { let t = new Anime(correctString(e.nom), e.id, e.mal_id); e.musique.forEach((e => { let i = new Music(t, e.type, e.numero, correctString(e.nom), correctString(e.artiste), e.lien); t.ajouteMusic(i) })); let i = e.genres; for (let e = 0; e < TabGenres.length; ++e)t.ajouteGenre(i[e]); globalList.ajouteAnime(t) })), doCorsRequest("get", "loadJsonUsers.json", setUsersData) } function setUsersData(e) { let t = document.getElementById("inclusOnHoldDropped").checked ? 4 : 2; for (let i = 0; i < globalList.getNbAnime; ++i) { let n = globalList.getAnime(i); TabStringPseudo.forEach((i => { let r = !1; for (let o = 1; o <= t && !r; ++o)null != e[i][o] && e[i][o].includes(n.getMalId) && (r = !0); n.ajouteUser(r) })) } globalList.generateHTML(), setupAffich(), setupFav(fav, favori), loadAdditionalData() } function genereTabTr(e, t = !0) { let i = [], n = AlternateColor1; for (let r = 0; r < e.getNbAnime; ++r) { e.getAnime(r).getHtml.setBackground(n), n = n == AlternateColor1 ? AlternateColor2 : AlternateColor1, t && i.push(e.getAnime(r).getHtml.getTr); for (let t = 0; t < e.getAnime(r).getNbMusic; ++t)i.push(e.getAnime(r).getMusic(t).getHtml.getTr) } return i } function setupAffich() { let e = document.createElement("div"); e.id = "info"; let t = document.createElement("table"); t.id = "AnimeMusicList", HTMLTab = genereTabTr(globalList); for (let e = 100; e < HTMLTab.length; ++e)decharger(HTMLTab[e]); nbAffich = HTMLTab.length < 100 ? HTMLTab.length : 100, nbPixelAvantUpdate = Math.ceil(120 + 6e3 * (Math.ceil(nbAffich / 100) - 1) + 4500); for (let e = 0; e < HTMLTab.length; ++e)t.appendChild(HTMLTab[e]); e.innerHTML = "&nbsp;Nb Anime: " + globalList.getNbAnime + " | Nb Musique: " + globalList.getNbMusic, document.body.appendChild(e), document.body.appendChild(t), filtre() } function affichFiltr() { clickAudioStop(), document.getElementById("info").innerHTML = "&nbsp;Nb Anime: " + listeFiltre.getNbAnime + " | Nb Musique: " + listeFiltre.getNbMusic, HTMLTab = genereTabTr(listeFiltre, !AffichageFavori); for (let e = 100; e < HTMLTab.length; ++e)decharger(HTMLTab[e]); nbAffich = HTMLTab.length < 100 ? HTMLTab.length : 100, nbPixelAvantUpdate = Math.ceil(120 + 6e3 * (Math.ceil(nbAffich / 100) - 1) + 4500); for (let e = 0; e < nbAffich; ++e)charger(HTMLTab[e]) } function filtreNomAnime(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n)e.getAnime(n).getNom.toLowerCase().includes(t.toLowerCase()) ? i.ajouteAnime(e.getAnime(n)) : e.getAnime(n).getHtml.dechargerAll(); return i } function filtreTypeMusic(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n) { for (var r = e.getAnime(n), o = new Anime(r.getNom, r.getId, r.getMalId, r.getHtml), a = 0; a < r.getNbMusic; ++a)r.getMusic(a).getType == t ? o.ajouteMusic(r.getMusic(a)) : decharger(e.getAnime(n).getMusic(a).getHtml.getTr); o.copieUsers(r), o.copieGenres(r), o.getNbMusic > 0 ? i.ajouteAnime(o) : decharger(e.getAnime(n).getHtml.getTr) } return i } function filtreNomMusic(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n) { for (var r = e.getAnime(n), o = new Anime(r.getNom, r.getId, r.getMalId, r.getHtml), a = 0; a < r.getNbMusic; ++a)r.getMusic(a).getNom.toLowerCase().includes(t.toLowerCase()) ? o.ajouteMusic(r.getMusic(a)) : decharger(e.getAnime(n).getMusic(a).getHtml.getTr); o.copieUsers(r), o.copieGenres(r), o.getNbMusic > 0 ? i.ajouteAnime(o) : decharger(e.getAnime(n).getHtml.getTr) } return i } function filtreNomArtistMusic(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n) { for (var r = e.getAnime(n), o = new Anime(r.getNom, r.getId, r.getMalId, r.getHtml), a = 0; a < r.getNbMusic; ++a)r.getMusic(a).getArtist.toLowerCase().includes(t.toLowerCase()) ? o.ajouteMusic(r.getMusic(a)) : decharger(e.getAnime(n).getMusic(a).getHtml.getTr); o.copieUsers(r), o.copieGenres(r), o.getNbMusic > 0 ? i.ajouteAnime(o) : decharger(e.getAnime(n).getHtml.getTr) } return i } function filtreUsersUnion(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n) { for (var r = !1, o = 0; o < TabStringUsers.length && !r;)t[o].checked && e.getAnime(n).getEtatUser(o) && (r = !0), r ? i.ajouteAnime(e.getAnime(n)) : o++; r || e.getAnime(n).getHtml.dechargerAll() } return i } function filtreUsersIntersection(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n) { for (var r = !1, o = 0; o < TabStringUsers.length && !r;)t[o].checked && !e.getAnime(n).getEtatUser(o) ? r = !0 : o++; r ? e.getAnime(n).getHtml.dechargerAll() : i.ajouteAnime(e.getAnime(n)) } return i } function filtreUsersExact(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n) { for (var r = !1, o = 0; o < TabStringUsers.length && !r;)t[o].checked != e.getAnime(n).getEtatUser(o) && (r = !0), o++; r ? e.getAnime(n).getHtml.dechargerAll() : i.ajouteAnime(e.getAnime(n)) } return i } function filtreGenres(e, t) { for (var i = new ListeAnime, n = 0; n < e.getNbAnime; ++n)e.getAnime(n).getEtatGenre(t) ? i.ajouteAnime(e.getAnime(n)) : e.getAnime(n).getHtml.dechargerAll(); return i } function checkboxListeModif(e) { for (let t = 0; t < TabStringUsers.length; ++t)if (e[t]) return !0; return !1 } function filtre() { let e = globalList; AffichageFavori = !1; let t = correctString(filtreNomAnimeInput.value); "" != t && (e = filtreNomAnime(e, t)), t = filtreTypeMusicSelect.value, "" != t && (e = filtreTypeMusic(e, t)), t = correctString(filtreNomMusicInput.value), "" != t && (e = filtreNomMusic(e, t)), t = correctString(filtreNomArtistInput.value), "" != t && (e = filtreNomArtistMusic(e, t)), t = correctString(filtreGenresSelect.value), "" != t && (e = filtreGenres(e, parseInt(t))); let i = [A, C, L, V, T, Q]; t = filtreJointureSelect.value, "Union" == t && checkboxListeModif(i) ? e = filtreUsersUnion(e, i) : "Intersection" == t ? e = filtreUsersIntersection(e, i) : "Exact" == t && (e = filtreUsersExact(e, i)), listeFiltre = e, affichFiltr() } async function resetFiltre() { "2" == ModeAffichLien && (AffichLien2.checked = !0), filtreNomAnimeInput.value = "", filtreTypeMusicSelect.value = "", filtreNomMusicInput.value = "", filtreNomArtistInput.value = "", filtreJointureSelect.value = "Union", A.checked = !0, C.checked = !0, L.checked = !0, V.checked = !0, T.checked = !0, Q.checked = !0, filtreGenresSelect.value = "" } function chercheNextBouton(e) { let t = e.parentElement.parentElement.nextElementSibling; for (; null != t && (t.classList.contains("grey") || "none" == t.style.display);)t = t.nextElementSibling; return null != t ? t.querySelector("button") : HTMLTab.length > 0 ? HTMLTab[0].classList.contains("grey") ? HTMLTab[1].querySelector("button") : HTMLTab[0].querySelector("button") : null } function clickAudio(e, t) { AudioActuel.src != e.replace(serveurCatbox2, serveurCatbox1) ? (AudioActuel.pause(), void 0 !== clickAudio.button && (clickAudio.button.innerHTML = "&#9658;"), AudioActuel.src = e.replace(serveurCatbox2, serveurCatbox1), AudioActuel.play(), t.innerHTML = "&#9208;", stateAudio = 1) : 1 == stateAudio ? (AudioActuel.pause(), t.innerHTML = "&#9658;", stateAudio = 0) : (AudioActuel.play(), t.innerHTML = "&#9208;", stateAudio = 1), clickAudio.button = t } function clickAudioStop() { null != clickAudio.button && (clickAudio.button.innerHTML = "&#9658", clickAudio.button = void 0, AudioActuel.pause(), stateAudio = 0) } function modifModeAffich() { ModeAffichLien = AffichLien1.checked ? AffichLien1.value : AffichLien2.value, localStorage.setItem("modeAffichLien", ModeAffichLien), location.reload() } async function setupFavori() { if (localStorage.getItem("favori")) { var e = localStorage.getItem("favori"); favori = e.split("|"); for (var t = 0; t < favori.length;)favori[t].startsWith("https://") ? t++ : favori.splice(t, 1); let i = favori.join("|"); localStorage.setItem("favori", i) } else localStorage.setItem("favori", favori) } async function saveFav() { const e = document.createElement("a"); var t = prompt("Nom du fichier : ", "SaveFav.txt"); null == t && (t = "saveFav.txt"), e.download = t, e.href = "data:text/plain," + localStorage.getItem("favori"), document.body.appendChild(e), e.click(), document.body.removeChild(e) } async function loadFav() { const e = document.createElement("input"); e.type = "file", e.onchange = function () { let t = e.files[0]; const i = new FileReader; i.onload = e => { localStorage.setItem("favori", e.target.result), location.reload() }, i.readAsText(t) }, document.body.appendChild(e), e.click(), document.body.removeChild(e) } async function sauvegardeFav() { for (var e = [], t = 0; t < fav.getNbAnime; ++t)for (var i = 0; i < fav.getAnime(t).getNbMusic; ++i)e.push(fav.getAnime(t).getMusic(i).getLien); var n = e.join("|"); localStorage.setItem("favori", n) } function posAnime(e, t) { if (0 == t.getNbAnime) return -1; for (var i, n = 0, r = t.getNbAnime; n < r;)i = Math.trunc((n + r) / 2), t.getAnime(i).getNom.toLowerCase() > e.getNom.toLowerCase() ? r = i : t.getAnime(i).getNom.toLowerCase() < e.getNom.toLowerCase() ? n = i + 1 : t.getAnime(i).getId > e.getId ? r = i : t.getAnime(i).getId < e.getId ? n = i + 1 : (n = i, r = i); return n } function posMusic(e, t, i) { for (var n = 0, r = 0; r < i.getNbMusic; ++r) { if (e.getLien == i.getMusic(r).getLien) return n; n < t.getNbMusic && t.getMusic(n).getLien == i.getMusic(r).getLien && n++ } return -1 } function identiqueAnime(e, t) { return e.getNom == t.getNom && e.getId == t.getId } async function ajoutFav(e, t) { var i = posAnime(e, fav); if (-1 != i && i != fav.getNbAnime && identiqueAnime(fav.getAnime(i), e)) { var n = posMusic(t, fav.getAnime(i), e); n > -1 && fav.ajoutePosMusic(i, t, n) } else { var r = new Anime(e.getNom, e.getId, e.getMalId, e.getHtml); r.ajouteMusic(t), fav.ajoutePosAnime(r, i) } } async function suppFav(e, t) { var i = posAnime(e, fav), n = posMusic(t, fav.getAnime(i), fav.getAnime(i)); fav.supprimePosMusic(i, n), 0 == fav.getAnime(i).getNbMusic && fav.supprimePosAnime(i) } function modifFav(e, t, i) { i ? ajoutFav(e, t) : suppFav(e, t), AffichageFavori && (AffichageFavori = !AffichageFavori, affichFav()), sauvegardeFav() } function setupFav(e, t) { if (0 == t.length) return; let i = 0; for (let n = 0; n < globalList.getNbAnime && i < t.length; ++n) { let r = new Anime(globalList.getAnime(n).getNom, globalList.getAnime(n).getId, globalList.getAnime(n).getMalId, globalList.getAnime(n).getHtml); for (let e = 0; e < globalList.getAnime(n).getNbMusic && i < t.length; ++e)globalList.getAnime(n).getMusic(e).getLien == t[i] && (r.ajouteMusic(globalList.getAnime(n).getMusic(e)), globalList.getAnime(n).getMusic(e).getHtml.getTd(0).innerHTML = "&#9733;", i++); r.getNbMusic > 0 && e.ajouteAnime(r) } fav.getNbMusic != favori.length && repareFav() } async function affichFav() { resetFiltre(), AffichageFavori ? (AffichageFavori = !1, listeFiltre = globalList) : (AffichageFavori = !0, listeFiltre = fav), globalList.dechargerAllHtml(), affichFiltr() } function chercheMusique(e) { for (let t = 0; t < globalList.getNbAnime; ++t)for (let i = 0; i < globalList.getAnime(t).getNbMusic; ++i)if (globalList.getAnime(t).getMusic(i).getLien == e) return globalList.getAnime(t).getMusic(i); return null } function repareFav() { let e = 0; for (let t = 0; t < favori.length; ++t) { let i = chercheMusique(favori[t]); null == i ? e++ : i.getHtml.getTd(0).innerHTML == falseTd.innerHTML && ajoutFav(i.getAnime, i) } if (fav.getNbMusic != favori.length - e) throw new Error("repareFav don't working"); sauvegardeFav(), location.reload() } async function setScoreUsers(e) { if (void 0 !== e) for (let t = 0; t < globalList.getNbAnime; ++t) { let i = globalList.getAnime(t); if (void 0 !== e[i.getMalId]) { let t = 2; TabStringUsers.forEach((n => { if (void 0 !== e[i.getMalId].scores[n] && 0 != e[i.getMalId].scores[n]) { let r = i.getHtml.getTr.querySelector("._" + t); r.innerHTML += "<br/>" + e[i.getMalId].scores[n], r.style.padding = "5px" } t++ })) } } } async function loadJson(e, t) { let i = new XMLHttpRequest; i.open(e, t), i.onload = i.onerror = function () { let e = i.responseText; e = JSON.parse(e), setScoreUsers(e) }, i.send() } async function loadAdditionalData() { try { loadJson("get", "https://aclvt.tchm.dev/additional-data.json") } catch (e) { console.log(e) } } Object.seal(HTMLMusic), Object.seal(Music), Object.seal(HTMLAnime), Object.seal(Anime), Object.seal(ListeAnime); const TabStringUsers = ["A", "C", "L", "V", "T", "Q"], TabStringPseudo = ["Tiralex1", "Cycygonzales", "49Leo", "Gyrehio", "tchm", "QGWolfWarrior"], TabGenres = ["Action", "Adventure", "Comedy", "Drama", "Ecchi", "Fantasy", "Horror", "Mahou Shoujo", "Mecha", "Music", "Mystery", "Psychological", "Romance", "Sci-Fi", "Slice of Life", "Sports", "Supernatural", "Thriller"]; let HTMLTab, globalList = new ListeAnime, fav = new ListeAnime, listeFiltre = globalList, AlternateColor1 = "lightgreen", AlternateColor2 = "lightcoral", nbAffich = 0, nbPixelAvantUpdate = 120, filtreNomAnimeInput = document.getElementById("name_anime"), filtreTypeMusicSelect = document.getElementById("type_music"), filtreNomMusicInput = document.getElementById("name_music"), filtreNomArtistInput = document.getElementById("name_artist"), filtreJointureSelect = document.getElementById("jointure"), A = document.getElementById("A"), C = document.getElementById("C"), L = document.getElementById("L"), V = document.getElementById("V"), T = document.getElementById("T"), Q = document.getElementById("Q"), filtreGenresSelect = document.getElementById("genres"), AudioActuel = new Audio(""), stateAudio = 0, inputLectureAuto = document.querySelector("#lecture_auto"), lectureAutomatique = inputLectureAuto.checked, serveurCatbox1 = "nl", serveurCatbox2 = "files", AffichLien1 = document.getElementById("affich_lien1"), AffichLien2 = document.getElementById("affich_lien2"), ModeAffichLien = "1"; localStorage.getItem("modeAffichLien") ? ModeAffichLien = localStorage.getItem("modeAffichLien") : localStorage.setItem("modeAffichLien", ModeAffichLien); let AffichageFavori = !1, favori = []; !async function () { resetFiltre().then((() => setupFavori())).then((() => lancementData())).then((() => setupListenersFiltrage())) }();